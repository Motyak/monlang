PROGRAM := (PROGRAM-SENTENCE NEWLINE)*

---

PROGRAM-SENTENCE = TERM

---

TERM := PROGRAM-WORD (SPACE PROG-WORD)*

---

PROGRAM-WORD :=  ASSOCIATION
        | POSTFIX-PARENTHESES-GROUP | POSTFIX-SQUARE-BRACKETS-GROUP
        | PARENTHESES-GROUP | SQUARE-BRACKETS-GROUP | CURLY-BRACKETS-GROUP
        | QUOTATION
        | ATOM
// note: ATOM takes all character until hitting one reserved by one of the word above

---

ASSOCIATION := {PROGRAM-WORD - ASSOCIATION} ':' PROGRAM-WORD

POSTFIX-PARENTHESES-GROUP := {PROGRAM-WORD - ASSOCIATION} PARENTHESES-GROUP

POSTFIX-SQUARE-BRACKETS-GROUP := {PROGRAM-WORD - ASSOCIATION} SQUARE-BRACKETS-GROUP

PARENTHESES-GROUP := '(' (TERM (',' SPACE TERM)*)? ')'

SQUARE-BRACKETS-GROUP := '[' (TERM (',' SPACE TERM)*)? ']'

CURLY-BRACKETS-GROUP := '{' PROGRAM-SENTENCE? | ((NEWLINE <TAB(S)+1> PROGRAM-SENTENCE?)+ NEWLINE <TAB(S)>) '}'
// note: <TAB(S)> is a as many TAB as nested levels (starting from 0, 1, ..)

QUOTATION := ('"' QUOTED-LINE? '"') | ('```' QUOTED-FORMAT? (NEWLINE <TAB(S)+1> QUOTED-LINE?)+ NEWLINE <TAB(S)> '```')
// note: should be /(?!\)"/ rather than /"/, otherwise escaped double quote can be misinterpreted
// note2: <TAB(S)> is a as many TAB as nested levels (starting from 0, 1, ..)

====================================================================================

# External rules
- comments (will be removed before scanning)
