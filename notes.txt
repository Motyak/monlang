
TODO:

- Exiger une proper tabulation dans les curly brackets group (1 '\t' par niveau d'indentation), et pour les multiline strings
- Faire une whitelist au lieu d'une blacklist pour les Atom ?

struct CharacterAppearance {
    char c;
    unsigned ntimes = 1;
    implicit CharacterAppearance(char c) : CharacterAppearance{c}{}
};

std::vector<CharacterAppearance>;
{ {'\', 0}, '"' }

{ {'\', 0}, {'`', 3} }


fds = "'fds'"
fds = "\"fds\""
fds = "`fds`"
fds = "\\"" # `\"`

fds = ```
    'fds'
    "fds"
    `fds`
```

fds = ```monlang
    fds = ```json
        {
            name: "fds",
            age: 13,
            major: false
        }
    ```
```

fds = {
    ```json
        {
            name: "fds",
            age: 13,
            major: false
        }
    ```
}

=======================================================

src/test/Association.cpp
  -> faire des #include "..." de chaque sous-tests Association (ex: ParenthesesGroupAssociation.cpp, ...)
    -> faire des tags comme pour le oneline/multiline du src/test/Quotation.cpp


=======================================================

- Faire un glossaire (e.g.: a sequence is a vector of CharacterAppearance, a CharacterAppearance is a certain character expected to appear a certain number of times in a row)
  -> s'inspirer du site ``
- Faire un fichier `err-codes.txt` qui associe Ã  chaque error code l'error message

