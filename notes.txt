TODO

- refactor l'algo de chaque entité (consumeXXX(..))
  -> il ne devrait pas y avoir plusieurs endroits dans le code qui retourne un même Error code

- refactor les tests (y'a trop de tests dans wbh.cpp maintenant, il faut avoir le moins de tests possibles)
  -> dans chaque test .cpp, on couvre le strict minimum en terme de feature PUIS les erreurs. Pas d'intégration.
  -> dans int.cpp, on met tous les tests d'intégration
    -> intégrations type <Entité>-Word (typiquement les nested entities)
  -> dans bigbang.cpp, intégrations "big bang" (des programmes complets) <=> tests système
  -> dans whitebox_bug_hunting.cpp on peut mettre autant de tests qu'on veut
  		, qui vont plus loin que le "example as specification"
		, on va plutôt tester la robustesse des algorithmes (d'où le whitebox)
		, ces tests ne doivent pas être inclus dans le all.cpp
    -> typiquement tous les tests utiles mais qui ne se limitent pas à du "example as specification" => on les met ici
	-> tous les bugs qu'on découvrent dans la playground => on les déplace ici aussi (pour check non-régression)

	=> [int][sbg]     -- pour une intégration type SquareBracketsGroup-Word
	=> [bigbang] -- pour une intégration type big bang
	=> du coup on peut lancer
	  => bin/test/all.elf [sbg][~int]
	  => bin/test/all.elf [sbg] -- inclus les tests de nesting, etc..
	  => bin/test/all.elf [int][~bigbang]
	  => bin/test/all.elf [bigbang]

---

Pour ajouter une entité grammaticale:
- Ajouter le header file dans include/monlang/
- Ajouter le source file dans src/
- Ajouter le nouveau type dans le variant Word dans Word.h
- Compléter Word::consumeWord dans Word.cpp: ajouter bloc de code appelant la fonction consumeXXX
- Dans toutes les implémentations de AstVisitor, ajouter une nouvelle opération pour le nouveau type
  -> .h ET .cpp
- Ajouter l'entité en haut du Makefile monlang/

---

Pour debug:

WHAT
- montree (codification d'un Program/ProgramSentence/Word sous forme d'arbre)
- buffer courant de l'input stream
- arguments passées aux fonctions

WHEN
- signaler entrée/sortie d'une fonction, avec quels arguments (terminatorCharacters par exemple)
- tracer les itérations de boucles


---

cloc . --exclude-dir=lib,.vscode,.deps,dist

# lister tous les test ids d'un binaire catch2
bin/test/all.elf --list-tests | grep -oP 'test-\d{4}'

# récupérer les identifiants de tests avec leur fichier respectif
grep 'test-' src/test/[!_]*.cpp | perl -pe 's/src\/test\/(.*)\.cpp:.*\[test-(\d{4})\].*/$1 $2/g' | column -s' ' -t | sort -k2 -n

# récupérer tous les appels de fonctions utils dans Makefile
perl -ne 'print "$1\n" if /\$\(call (\w+),/' Makefile | sort | uniq | sed -z 's/\n/, /g'

---

To test makefile quality:

# only if we want to test the 'BUILD_LIBS_ONCE= ' configuration
source env.sh
make mrproper

make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?

rm lib/catch2/obj/catch_amalgamated.o
make -n bin/test/all.elf
  -> comprends pas qu'il faut repackager + recompiler avec nouveau package
  -> FIXED
make -q bin/test/all.elf; echo $?
make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?
make bin/test/all.elf

rm lib/montree/obj/montree.o
make -n bin/test/all.elf
  -> comprends pas qu'il faut repackager + recompiler avec nouveau package
  -> FIXED
make -q bin/test/all.elf; echo $?
make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?
make bin/test/all.elf

rm lib/test-libs.a
make -n bin/test/all.elf
  -> il comprends pas qu'il faut repackager la lib MAIS il veut la recompiler (l'ancienne)
  -> FIXED
make -q bin/test/all.elf; echo $?
make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?
make bin/test/all.elf

<edit lib/montree/src/montree.cpp>
make -n bin/test/all.elf
  -> comprends pas qu'il faut repackager + recompiler avec nouveau package
  -> FIXED
make -q bin/test/all.elf; echo $?
make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?
make bin/test/all.elf

## also mitigate desync with sub-makes ##
<edit lib/montree/src/montree.cpp>
make -C lib/montree # next time we askmake, will say 'nothing to do'..
make -n bin/test/all.elf # ..but we detect we are out of date nonetheless
make -q bin/test/all.elf; echo $?
make bin/test/all.elf
make -n bin/test/all.elf
make -q bin/test/all.elf; echo $?
make bin/test/all.elf

Makefile:
==================================================================================================
include utils.mk # askmake, buildmake, clean, not, shell_onrun, shouldrebuild

SHELL := /bin/bash
RM := rm -rf
CXXFLAGS := --std=c++23 -Wall -Wextra -Og -ggdb3 -I include
CXXFLAGS_TEST = $(CXXFLAGS) $(addprefix -I ,$(LIB_INCLUDE_DIRS))
DEPFLAGS = -MMD -MP -MF .deps/$(notdir $*.d)
DEPFLAGS_TEST = -MMD -MP -MF .deps/test/$(notdir $*.d)
ARFLAGS := rcsv

BUILD_LIBS_ONCE ?= y # disable by passing `BUILD_LIBS_ONCE=`
DISABLE_WORDS ?= $(empty) # e.g.: DISABLE_WORDS=SBG,
DISABLE_POSTFIXES ?= $(empty) # e.g.: DISABLE_POSTFIXES=PG_IN_ATOM,
ifdef TRACE
	CXXFLAGS += -D TRACE
endif
ifdef CLANG
	CXX := clang++
#	ugly workaround to support clang
	CXXFLAGS += -D__cpp_concepts=202002L
	LDFLAGS += -lstdc++
endif
ifdef X86
	CXXFLAGS += -m32
	LDFLAGS += -m32
endif

###########################################################

ENTITIES := \
Atom \
CurlyBracketsGroup \
ParenthesesGroup \
PostfixParenthesesGroup \
PostfixSquareBracketsGroup \
Program \
ProgramSentence \
ProgramWord \
SquareBracketsGroup \
Term \
Word \

OBJS := $(ENTITIES:%=obj/%.o) obj/common.o
DEPS := $(ENTITIES:%=.deps/%.d) .deps/common.d

TEST_FILENAMES := $(foreach file,$(wildcard src/test/*.cpp),$(file:src/test/%.cpp=%))
TEST_OBJS := $(TEST_FILENAMES:%=obj/test/%.o)
TEST_DEPS := $(TEST_FILENAMES:%=.deps/test/%.d)
TEST_BINS := $(TEST_FILENAMES:%=bin/test/%.elf)

LIB_OBJ_DIRS := $(foreach lib,$(wildcard lib/*/),$(lib:%/=%)/obj) # for cleaning
LIB_INCLUDE_DIRS := $(foreach lib,$(wildcard lib/*/),$(lib:%/=%)/include)

###########################################################

all: main

main: $(OBJS)

test: bin/test/all.elf
	./run_tests.sh

# able to run in parallel mode, e.g.: make -j clean <targets>
clean:
	@# $@ DONE
$(call clean, $(RM) $(OBJS) $(TEST_OBJS) $(DEPS) $(TEST_DEPS))

mrproper:
	$(RM) bin obj .deps lib/libs.a lib/test-libs.a $(LIB_OBJ_DIRS)

.PHONY: all main test clean mrproper

###########################################################

word_macros := $(addprefix -D DISABLE_,$(subst $(comma),$(space),$(DISABLE_WORDS)))
postfix_macros := $(addprefix -D DISABLE_P,$(subst $(comma),$(space),$(DISABLE_POSTFIXES)))
$(OBJS): obj/%.o: src/%.cpp
	$(CXX) -o $@ -c $< $(CXXFLAGS) $(DEPFLAGS) $(word_macros) $(postfix_macros)

$(TEST_OBJS): obj/test/%.o: src/test/%.cpp
	$(CXX) -o $@ -c $< $(CXXFLAGS_TEST) $(DEPFLAGS_TEST)

$(TEST_BINS): bin/test/%.elf: obj/test/%.o $(OBJS) lib/test-libs.a
	$(CXX) -o $@ $^ $(LDFLAGS) $(LDLIBS)

-include $(DEPS) $(TEST_DEPS)

############################################################
# libs
############################################################

## aggregate all lib objects into one static lib ##
.SECONDEXPANSION:
lib/libs.a: $$(lib_objects)
	$(AR) $(ARFLAGS) $@ $^

## aggregate all test lib objects into one static test lib ##
.SECONDEXPANSION:
lib/test-libs.a: $$(test_lib_objects)
# when BUILD_LIBS_ONCE is unset => we always enter this recipe
	$(if $(call shouldrebuild, $@, $^), \
		$(AR) $(ARFLAGS) $@ $^)

## compiles lib used for testing (catch2) ##
test_lib_objects += lib/catch2/obj/catch_amalgamated.o
lib/catch2/obj/catch_amalgamated.o:
	$(call buildmake, lib/catch2)

## compiles our own lib used for testing (montree) ##
test_lib_objects += lib/montree/obj/montree.o
$(if $(and $(call not,$(BUILD_LIBS_ONCE)),$(call askmake, lib/montree)), \
	.PHONY: lib/montree/obj/montree.o)
lib/montree/obj/montree.o:
	$(call buildmake, lib/montree)

###########################################################

# will create all necessary directories after the Makefile is parsed
$(call shell_onrun, mkdir -p obj/test .deps/test bin/test $(LIB_OBJ_DIRS))

## debug settings ##
$(call shell_onrun, [ ! -e bin/test/.gdbinit ] && cp .gdbinit bin/test/.gdbinit)
$(call shell_onrun, grep -qs '^set auto-load safe-path /$$' ~/.gdbinit || echo "set auto-load safe-path /" >> ~/.gdbinit)

.DELETE_ON_ERROR:
.SUFFIXES:

==================================================================================================